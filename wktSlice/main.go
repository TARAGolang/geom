package main

import (
	"fmt"
	"sort"
	"bytes"
	"strconv"
	"time"
)

var bln = true
var wktEmpty = []byte("empty")
var wktPolygon = []byte("polygon")
var wktLinestring = []byte("linestring")
var wktPoint = []byte("point")
var wktComma = []byte{','}
var wktSpace = []byte{' '}

const (
	GeoType_Unkown     = iota - 1
	GeoType_Point
	GeoType_Segment
	GeoType_LineString
	GeoType_Polygon
)

type Shell [][]float64
type Holes []Shell
type WKTParserObj struct {
	shell Shell
	holes Holes
	gtype int
}

type Token struct {
	children []*Token
	i        int
	j        int
}

type Tokens []*Token

//len of coordinates - sort interface
func (s Tokens) Len() int {
	return len(s)
}

//swap - sort interface
func (s Tokens) Swap(i, j int) {
	s[i], s[j] = s[j], s[i]
}

//less - 2d compare - sort interface
func (s Tokens) Less(i, j int) bool {
	return s[i].i < s[j].i
}

func main() {
	fmt.Println("...")
	//defer profile.Start().Stop()
	//var wkt = "POLYGON ((35 10, 45 45, 15 40, 10 20, 35 10), (20 30, 35 35, 30 20, 20 30))"
	//var wkt = "MULTIPOLYGON (((40 40, 20 45, 45 30, 40 40)), ((20 35, 10 30, 10 10, 30 5, 45 20, 20 35),(30 20, 20 15, 20 25, 30 20)), ((20 35, 10 30, 10 10, 30 5, 45 20, 20 35),(30 20, 20 15, 20 25, 30 20)))"
	//var wkt = "MULTIPOLYGON (((40 40, 20 45, 45 30, 40 40)), ((20 35, 10 30, 10 10, 30 5, 45 20, 20 35),(30 20, 20 15, 20 25, 30 20)))"
	//var wkt = "MULTIPOINT ((10 40), (40 30), (20 20), (30 10))"
	//var wkt = "POLYGON ((30 10, 40 40, 20 40, 10 20, 30 10))"
	//var wkt = "POINT (30 10)"
	//var wkt = "LINESTRING (3.142 3.14159265, 6.142 3.14159265, 9.318 3.14159265)"
	//var wkt = "LINESTRING ( 10 20 30, 11 21 31, 12 22 32 )"
	//var wkt = "POLYGON ((35 10, 45 45, 15 40, 10 20, 35 10),(20 30, 35 35, 30 20, 20 30))"

	//var name, tokens = buildTokens(wktBytes)
	//tokens = aggregateTokens(tokens)
	//var parseObj = ReadWKT(name, wktBytes, tokens)
	//fmt.Println(parseObj)

	//fmt.Println(string(wktBytes[tokens[0].i+1 : tokens[0].j]))
	//var tcoords = tokenCoordinates(wktBytes, tokens)
	//var coords = tcoords[0].([][]byte)
	//for _, ch := range coords {
	//	fmt.Println(string(ch))
	//}
	benchGB(10000)
	fmt.Println(bln)
}

func buildTokens(stream []byte) ([]byte, []*Token) {
	var tokens []*Token
	var stack []*Token
	var namespace bool
	var name []byte
	var s *Token

	for i, o := range stream {
		if o == '(' {
			namespace = true
			stack = append(stack, &Token{i: i})
		} else if o == ')' {
			s = popToken(&stack)
			s.j = i
			tokens = append(tokens, s)
		}

		if !namespace {
			if o != ' ' {
				name = append(name, o)
			}
		}
	}

	return name, tokens
}

func aggregateTokens(tokens []*Token) []*Token {
	var bln = false
	bln, tokens = aggregateSequence(tokens)
	if bln && len(tokens) > 1 {
		for _, tok := range tokens {
			_, tok.children = aggregateSequence(tok.children)
		}
	}
	return tokens
}

func aggregateSequence(tokens []*Token) (bool, []*Token) {
	if len(tokens) <= 1 {
		return false, tokens
	}

	sort.Sort(Tokens(tokens))
	var head *Token
	var heads []*Token
	var aggregate = false

	for _, tok := range tokens {
		if head == nil {
			head = tok
			heads = append(heads, head)
		} else {
			if head.i < tok.i && tok.j < head.j {
				head.children = append(head.children, tok)
				aggregate = true
			} else {
				head = tok
				heads = append(heads, head)
			}
		}
	}
	return aggregate, heads
}

// tokenCoordinates
func ReadWKT(wkt string) WKTParserObj {
	var wktBytes = []byte(wkt)
	var name, tokens = buildTokens(wktBytes)
	tokens = aggregateTokens(tokens)
	name = bytes.ToLower(name)

	var obj = WKTParserObj{gtype: GeoType_Unkown}
	if bytes.Equal(name, wktEmpty) || bytes.Equal(name, nil) {
		return obj
	}
	if bytes.Equal(name, wktPolygon) {
		obj = wktPolygonParser(GeoType_Polygon, wktBytes, tokens[0])
	} else if bytes.Equal(name, wktLinestring) {
		obj = wktLinestringParser(GeoType_LineString, wktBytes, tokens[0])
	} else if bytes.Equal(name, wktPoint) {
		obj = wktPointParser(GeoType_Point, wktBytes, tokens[0])
	}
	return obj
}

//checks for the emptiness of wkt string
func isEmptyWKT(wkt []byte) bool {
	return bytes.Index(wkt, wktEmpty) != -1
}

//parse float
func parseF64(str []byte) float64 {
	var x, err = strconv.ParseFloat(string(str), 64)
	if err != nil {
		panic("unable to convert to float")
	}
	return x
}

//Parse point
func wktPointParser(typeId int, wkt []byte, tok *Token) WKTParserObj {
	var obj = WKTParserObj{gtype: typeId}
	var ptbytes = wkt[tok.i+1 : tok.j]
	var coord = bytes.Split(ptbytes, wktSpace)
	obj.shell = Shell{[]float64{
		parseF64(coord[0]),
		parseF64(coord[1]),
	}}
	return obj
}

//parse linestring
func wktLinestringParser(typeId int, wkt []byte, tok *Token) WKTParserObj {
	return WKTParserObj{gtype: typeId, shell: parseString(wkt, tok)}
}

//parse polygon
func wktPolygonParser(typeId int, wkt []byte, token *Token) WKTParserObj {
	var shell Shell
	var obj = WKTParserObj{gtype: typeId}
	var n = len(token.children)
	var holes = make(Holes, 0, n-1)
	for i, tok := range token.children {
		if i == 0 {
			shell = parseString(wkt, tok)
		} else {
			holes = append(holes, parseString(wkt, tok))
		}
	}
	obj.shell, obj.holes = shell, holes
	return obj
}

//parse linestring
func parseString(wkt []byte, tok *Token) Shell {
	var wktStr = wkt[tok.i+1 : tok.j]
	var indices = numberIndices(wktStr)
	var dim = dimension(wktStr)
	var lns = parseNums(wktStr, indices)
	var shell = make(Shell, 0, len(lns)/dim)
	for i := 0; i < len(lns); i += dim {
		shell = append(shell, lns[i:i+dim])
	}
	return shell
}

func numberIndices(stream []byte) []int {
	var indices []int
	var idx, i, j = -1, -1, -1
	var n = len(stream)
	for idx < n {
		idx++
		if idx >= n {
			break
		}
		if stream[idx] == ' ' || stream[idx] == ',' {
			continue
		}
		if i == -1 {
			i, j = idx, idx
			for j < n && !(stream[j] == ' ' || stream[j] == ',') {
				j++
			}
			indices = append(indices, i, j)
			idx, i, j = j, -1, -1
		}
	}
	return indices
}

func parseNums(strBytes []byte, indices []int) []float64 {
	var coordinates = make([]float64, 0, len(indices)/2)
	for i := 0; i < len(indices); i += 2 {
		coordinates = append(coordinates, parseF64(strBytes[indices[i]:indices[i+1]]))
	}
	return coordinates
}

func dimension(stream []byte) int {
	var idx, i, j = -1, -1, -1
	var dim, n = 1, len(stream)
	for idx < n {
		idx++
		if idx >= n {
			break
		}
		if stream[idx] == ' ' || stream[idx] == ',' {
			continue
		}
		if i == -1 {
			i, j = idx, idx
			for j < n && !(stream[j] == ' ' || stream[j] == ',') {
				j++
			}
			if stream[j] == ',' {
				break
			}
			dim++
			idx, i, j = j, -1, -1
		}
	}
	return dim
}

func popToken(tokens *[]*Token) *Token {
	var v *Token
	var a = *tokens
	var n = len(a) - 1
	if n < 0 {
		return nil
	}
	v, a[n] = a[n], nil
	*tokens = a[:n]
	return v
}

func benchGB(N int) {
	var shapely_bench = func() bool {
		var gb_wkt = "POLYGON ((189 154, 192 155, 193 154, 194 151, 194 150, 196 151, 199 151, 200 150, 203 149, 204 149, 205 149, 206 149, 209 150, 211 149, 212 149, 212 152, 212 155, 213 156, 213 156, 213 159, 214 159, 216 161, 216 161, 216 163, 217 163, 218 166, 218 166, 217 163, 217 162, 218 162, 218 163, 220 165, 218 167, 218 167, 215 168, 214 170, 214 171, 215 170, 217 168, 220 168, 221 168, 222 170, 223 172, 223 174, 224 176, 223 178, 223 179, 223 179, 223 180, 222 180, 222 180, 221 178, 222 177, 222 174, 221 174, 220 172, 218 172, 218 174, 220 174, 218 174, 220 176, 220 178, 217 180, 221 179, 221 180, 222 181, 221 182, 218 183, 218 183, 217 182, 214 184, 214 187, 214 189, 211 191, 210 191, 210 190, 209 189, 207 189, 206 189, 207 189, 209 191, 209 191, 210 191, 207 192, 205 191, 204 191, 204 191, 204 192, 204 194, 204 195, 206 195, 206 198, 206 199, 206 200, 206 202, 206 203, 210 206, 209 207, 207 211, 209 212, 210 212, 210 213, 207 212, 207 213, 206 213, 207 215, 209 216, 209 218, 210 222, 209 226, 211 226, 209 231, 207 232, 206 234, 205 237, 205 240, 202 246, 201 247, 200 247, 200 247, 200 248, 201 249, 201 248, 201 250, 202 251, 201 254, 200 254, 201 253, 199 254, 199 253, 199 253, 196 254, 194 251, 192 253, 193 251, 192 251, 192 251, 191 251, 192 253, 191 253, 190 254, 189 255, 189 255, 190 254, 190 253, 190 251, 189 251, 189 249, 189 251, 189 253, 189 253, 188 255, 185 254, 187 253, 185 253, 185 253, 185 254, 184 254, 183 254, 179 254, 177 255, 177 255, 176 255, 174 255, 176 256, 177 257, 176 257, 176 258, 172 258, 172 260, 171 260, 170 260, 169 259, 169 260, 168 260, 169 261, 167 262, 166 264, 166 264, 162 265, 161 264, 161 264, 162 262, 163 261, 160 262, 158 261, 158 262, 159 262, 160 264, 160 265, 160 265, 158 267, 157 267, 156 267, 155 267, 155 267, 154 268, 154 270, 154 269, 151 269, 150 272, 149 272, 149 270, 147 270, 147 272, 146 272, 146 272, 144 270, 143 272, 141 270, 141 272, 140 272, 140 271, 140 273, 139 273, 139 273, 139 273, 138 272, 138 273, 137 273, 137 273, 136 272, 137 270, 136 269, 136 270, 135 270, 134 270, 134 272, 133 272, 133 272, 132 272, 132 270, 129 272, 130 272, 128 272, 128 271, 127 272, 127 271, 127 271, 129 269, 132 269, 134 267, 134 267, 128 269, 127 269, 128 268, 129 267, 136 266, 136 266, 136 265, 136 265, 135 264, 135 262, 135 264, 134 266, 126 266, 126 267, 124 267, 123 267, 122 267, 122 267, 122 267, 122 266, 123 267, 123 266, 123 265, 123 265, 125 265, 126 264, 125 264, 125 262, 127 261, 127 262, 127 261, 129 261, 128 261, 130 259, 133 259, 134 259, 132 259, 129 260, 128 260, 127 260, 127 260, 122 262, 122 261, 121 261, 121 260, 122 259, 121 258, 119 259, 118 260, 118 258, 117 258, 117 256, 119 256, 121 256, 119 255, 119 255, 121 254, 121 254, 126 251, 127 250, 127 251, 127 251, 128 249, 129 249, 132 249, 128 248, 127 248, 127 249, 126 248, 123 249, 122 248, 121 248, 119 248, 121 249, 121 249, 118 248, 119 249, 117 249, 116 248, 116 248, 116 247, 117 247, 116 246, 117 246, 117 247, 118 247, 118 245, 119 245, 121 244, 123 244, 123 245, 125 246, 126 244, 125 243, 126 242, 126 244, 127 246, 129 246, 129 246, 129 246, 132 246, 132 245, 128 245, 128 243, 129 244, 129 243, 130 240, 128 239, 128 239, 133 238, 134 237, 135 238, 135 237, 134 237, 134 237, 135 235, 136 235, 138 236, 138 235, 141 236, 147 234, 147 235, 148 235, 149 234, 151 234, 151 234, 154 234, 150 233, 149 233, 149 232, 148 231, 147 231, 147 232, 144 235, 143 234, 141 236, 140 235, 141 234, 139 234, 137 234, 137 233, 136 232, 137 234, 134 234, 134 235, 129 234, 128 234, 132 234, 135 231, 136 229, 138 229, 138 227, 139 226, 139 224, 141 223, 140 223, 138 223, 138 223, 139 222, 143 217, 146 217, 147 217, 147 217, 149 217, 147 217, 149 217, 149 217, 150 217, 150 217, 150 216, 151 215, 150 215, 149 215, 149 214, 150 213, 150 213, 150 212, 148 212, 146 213, 139 213, 138 213, 138 211, 138 211, 137 213, 137 213, 137 212, 137 211, 137 210, 137 210, 138 210, 137 209, 137 210, 137 209, 137 209, 137 209, 137 209, 136 210, 135 210, 134 209, 133 209, 133 207, 133 207, 135 206, 135 206, 135 206, 135 206, 133 206, 133 206, 133 206, 133 206, 132 206, 132 207, 129 206, 128 205, 127 206, 127 205, 126 205, 127 203, 129 204, 128 203, 128 202, 127 201, 126 201, 128 201, 128 200, 132 201, 129 198, 134 198, 134 196, 134 194, 136 193, 138 194, 139 193, 138 193, 139 192, 138 192, 139 191, 139 191, 139 190, 136 190, 135 190, 134 190, 134 190, 134 188, 136 189, 136 189, 136 189, 136 187, 136 187, 136 188, 136 187, 136 187, 135 184, 135 183, 136 183, 135 183, 136 182, 135 182, 135 183, 134 182, 134 182, 134 182, 135 181, 134 181, 135 180, 134 180, 135 179, 135 179, 133 178, 133 179, 133 179, 133 180, 132 180, 132 180, 132 181, 132 182, 130 182, 132 178, 132 178, 130 177, 132 177, 132 177, 134 174, 134 177, 135 178, 135 179, 134 178, 134 178, 136 179, 136 177, 136 178, 136 177, 136 177, 136 176, 136 174, 138 176, 143 176, 144 178, 146 177, 147 177, 147 178, 148 179, 148 179, 148 180, 148 180, 149 181, 149 181, 151 178, 154 178, 156 180, 157 179, 157 179, 158 180, 160 181, 161 181, 160 180, 160 180, 161 179, 162 179, 161 178, 161 178, 162 178, 162 178, 161 177, 160 178, 159 177, 161 176, 161 174, 161 174, 163 174, 162 173, 163 172, 163 173, 167 173, 168 171, 168 170, 170 168, 170 168, 171 168, 170 168, 168 168, 167 168, 167 168, 167 168, 166 168, 163 170, 163 168, 166 168, 166 168, 163 168, 163 168, 161 168, 160 168, 157 166, 158 165, 157 165, 158 165, 158 163, 160 162, 165 163, 163 162, 162 162, 163 162, 166 163, 162 160, 163 160, 167 160, 166 159, 166 159, 167 159, 168 159, 167 159, 166 158, 166 159, 165 158, 165 156, 167 156, 166 156, 165 154, 166 154, 166 152, 167 154, 167 152, 168 152, 168 152, 168 152, 168 151, 169 150, 171 150, 171 150, 171 150, 171 151, 172 150, 174 150, 174 148, 174 147, 176 148, 176 149, 177 149, 177 150, 177 150, 178 150, 177 150, 178 150, 178 150, 178 149, 177 149, 177 147, 178 147, 178 147, 178 150, 179 150, 180 151, 180 152, 181 151, 180 148, 180 150, 180 149, 180 148, 179 148, 179 147, 180 147, 181 146, 182 147, 182 149, 183 151, 183 151, 183 152, 181 155, 182 155, 182 155, 181 155, 180 157, 182 155, 184 154, 184 154, 184 151, 183 148, 184 148, 183 147, 184 147, 184 147, 184 147, 187 146, 187 146, 187 147, 189 147, 187 146, 187 145, 187 145, 187 144, 185 144, 185 144, 189 144, 190 145, 191 146, 195 148, 195 149, 191 151, 189 154))"
		var ln_wkt = []string{
			"LINESTRING ( 147.1447918565442 234.65237676676674, 147.50602710407424 234.78783998459048, 147.70599661609978 234.63947550792636, 147.70599661609978 234.2911415192367, 147.9253180163859 234.23953648387524, 148 234.34274655459814, 148.1962444520334 234.26533900155596, 148.3768620757984 234.11052389547166, 148.36396081695807 233.89120249518558, 148.47362151710112 233.86539997750486, 148.95741872361455 233.85894934808468, 149.30575271230424 233.8524987186645, 149.3767096359262 233.56222039475642, 149.48637033606926 233.50416472997483, 149.76374740113695 233.77509116562234, 149.85642397852965 233.8572837091235, 150.4451479115241 233.7397849620172, 150.99771949965245 233.74394318835806, 151.36718998830045 233.732408625403, 151.44832969105676 233.4447314974488, 151.11549502067686 233.40457161701, 150.2607394961688 233.48898951713406, 149.40251215360692 233.09777507650352, 149.31865397114458 233.32999773562997, 149.08643131201814 233.2267876649071, 149.01547438839617 233.1042257059237, 148.77035047042935 233.13002822360443, 148.62198599376524 233.4525596946134, 148.576831587824 233.02036752346137, 148.83485676463116 232.9494105998394, 148.8477580234715 232.83329927027617, 148.8477580234715 232.53657031694794, 148.82195550579078 232.34305143434256, 148.51877592304237 232.28499576956094, 148.51232529362218 232.20113758709863, 148.84130739405134 232.06567436927486, 148.6606897702863 232, 148.35751018753788 231.85925422782913, 148.13818878725178 231.62703156870268, 147.8866142398648 231.45286457435782, 147.52537899233477 231.38190765073585, 147.37056388625047 231.48511772145872, 147.2673538155276 231.8657048572493, 147.47377395697333 232.00116807507305, 147.1125387094433 232.2333907341995, 147.1060880800231 232.36885395202327, 147.31250822146885 232.69783605245243, 147.20929815074598 232.81394738201564, 147 232.80749675259545, 146.8029084972747 232.71073731129277, 146.6093896146693 232.9236080821587, 146.59648835582897 233.2009851472264, 146.71905031481236 233.37515214157125, 146.8932173091572 233.48481284171427, 147 233.74928864794163, 146.88236933477205 233.88972845597567, 146.50617954394644 233.8524987186645, 145.9320735255505 233.67188109489948, 145.51923324265903 233.74283801852147 )",
			"LINESTRING ( 166.99313257148125 168.83137493401622, 166.4495681012277 170.92200751191453, 165.86419097941618 172.4272629680013, 164.10805961398162 171.71644789151588, 164.35893552332942 170.62931895100877, 163.48086984061214 170.62931895100877, 162.435553551663 170.79656955724062, 160.59579688311248 170.79656955724062, 162.435553551663 168.87318758557421, 160.80486014090232 168.53868637311047, 159.7177312003952 170.29481773854505, 159.9076725058709 175.07006520012519, 157.90400674845708 176.90802402076775, 158.4013928156205 178.10816390313892, 159.98703932032504 178.13174228982595, 161.11290728463194 178.6681505869565, 160 179.24582106078935, 159.0195035623365 179.27845475026157, 159.36138812676407 180.00495944967014, 158.4485495889946 179.98264564475988, 157.01530788123858 178.07736463552894, 154.02179590744993 177.32898664208176, 148.3621873320058 176.6741558978155, 145.43371250576038 176.92748144467203, 144 177.29233207511135, 143.64292411495256 176, 138.46390592813805 175.60272834741284, 138.44154285646158 174.56726303562488, 137.58655161378377 174.36968985156355, 137.07851116113454 172.7074685842533, 135.82393889215305 173.14455544863637, 135.70537749832144 174.8518395198123, 134.78850271935656 175.4999751394254, 135.78441842754253 175.7924265775435, 134.7410781618239 176.20343940949326, 135.73699387000988 176.81205456449578, 135.34178922390433 176.88319140079477, 135.47122542770808 178.3267307829291, 134.7885027193566 177.61036794962897, 134.25892849357516 176.88319140079477, 134.25892849357513 175.0020172853324, 134.56718811753746 173.9586770196138, 132.8240416754099 173.82160256966475, 132.01475891066485 172.09485238811547 )",
			"LINESTRING ( 223.46907844262407 173.55752521327966, 224.29944771290735 173.07314313894773, 224.49704761534787 174.04361110877105, 224.47244131088306 177.65747348530337, 222.93279828889945 180.52916721169973, 222 180.25237745493862, 221.41045462671343 180, 221.3239578277256 178.78193187214532, 220.99420541558422 178.59350192235024, 220.5973847162277 178.36674723700366, 220.51088791723987 177.65747348530337, 220.52680270775812 177.1372270463699, 220.41066082635805 175.82589633387371, 220.801383884671 176.5623831256597, 221.2677679174819 176.10238249230076, 221.5963890530915 175.71820237981112, 221.2199256331939 175.11364195034864, 221.6291727713769 175.14448730981695, 221.611207446375 174.17480786156972, 220.7276205185289 174.21015133868357, 220.39283587155506 173.50105497045345, 220 173.06103474960324, 219.22177034512174 173.19927782881678, 218.64114941242497 172.45276520106376 )",
		}
		var bln bool
		for _, wkt := range ln_wkt {
			var lnObj   = ReadWKT(wkt)
			var polyObj = ReadWKT(gb_wkt)
			bln = (lnObj.shell != nil) && (polyObj.shell != nil) || bln
		}
		return bln
	}

	var t0 = time.Now()
	for i := 0; i < N; i++ {
		bln = shapely_bench()
	}
	var t1 = time.Now()
	fmt.Println("elapsed time: ", t1.Sub(t0).Seconds())
}
